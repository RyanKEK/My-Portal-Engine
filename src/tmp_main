/*
int				main(int argc, char **argv)
{
	unsigned	i;
	t_player	player;
	t_sdl		*sdl;
	t_read_holder	holder;

//	printf("%s\n",skip_row_num("1) image.jpeg"));
//	return (0);
	holder = (t_read_holder){};
	if (argc > 1)
		holder.sectors = read_map(argv[1], &holder);
	
	if (!holder.sectors)
		exit(1);
	sdl = new_t_sdl(W, H, "test_sectors");
	init_sdl(sdl);
	SDL_ShowCursor(SDL_DISABLE);
	printf("tan:%f\n2f:%f\n", sdl->win_size.y / tan(350), .2f * sdl->win_size.y);
	player = (t_player){};
	player.pos = (t_vector){3, 3, 0};
	player.half_win_size = (t_point) {sdl->win_size.x / 2, sdl->win_size.y / 2};
//	player.yaw = -0.3;
	// screenHeight / tan(horizontalfov) good value tan(400) 

	player.hfov = sdl->win_size.x / tan(400) /*0.73f * sdl->win_size.y*/; 
//	player.vfov = sdl->win_size.y * (1.0 * .2f);

	player.vfov	= .2f * sdl->win_size.y /*.2f * sdl->win_size.y*/;
//	player.hfov = sdl->win_size.y * (1.0 * 0.73f * sdl->win_size.y / sdl->win_size.x);
	// screenWidth / tan(verticalfov) good value tan(350)


	player.height = EyeHeight;
	player.curr_sector = holder.sectors;


//	list_sectors(holder.sectors);
	game_loop(sdl, player, holder.sectors);

	i = 0;
	while (i < holder.text_count)
		SDL_FreeSurface(holder.textures[i++]);
	list_sectors(holder.sectors);
	
	delete_walls(holder.walls, holder.wall_count);

	delete_sectors(holder.sectors);
	free_t_sdl(&sdl);
//	system("leaks -q test");

}
*/